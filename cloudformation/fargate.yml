Resources:
  CanvasVPCD20D58E8:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: PrivateIntegrationsStack/CanvasVPC
  CanvasVPCPublicSubnet1SubnetBE0B3CBD:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Public
        - Key: "aws-cdk:subnet-type"
          Value: Public
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet1RouteTableA63763CC:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet1RouteTableAssociationFD6DF484:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet1RouteTableA63763CC
      SubnetId: !Ref CanvasVPCPublicSubnet1SubnetBE0B3CBD
  CanvasVPCPublicSubnet1DefaultRouteD59FC1D2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet1RouteTableA63763CC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CanvasVPCIGW3645F9D4
    DependsOn:
      - CanvasVPCVPCGW514A8E2A
  CanvasVPCPublicSubnet1EIPD3DAF766:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet1NATGatewayC5702CC8:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref CanvasVPCPublicSubnet1SubnetBE0B3CBD
      AllocationId: !GetAtt
        - CanvasVPCPublicSubnet1EIPD3DAF766
        - AllocationId
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet2Subnet26685AB7:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Public
        - Key: "aws-cdk:subnet-type"
          Value: Public
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet2
  CanvasVPCPublicSubnet2RouteTable356B306D:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet2
  CanvasVPCPublicSubnet2RouteTableAssociation1035F5D0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet2RouteTable356B306D
      SubnetId: !Ref CanvasVPCPublicSubnet2Subnet26685AB7
  CanvasVPCPublicSubnet2DefaultRoute4AB2237D:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet2RouteTable356B306D
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CanvasVPCIGW3645F9D4
    DependsOn:
      - CanvasVPCVPCGW514A8E2A
  CanvasVPCPublicSubnet2EIP40226FDB:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet2
  CanvasVPCPublicSubnet2NATGatewayE6EAEEAB:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref CanvasVPCPublicSubnet2Subnet26685AB7
      AllocationId: !GetAtt
        - CanvasVPCPublicSubnet2EIP40226FDB
        - AllocationId
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PublicSubnet2
  CanvasVPCPrivateSubnet1SubnetE5CDA06F:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Private
        - Key: "aws-cdk:subnet-type"
          Value: Private
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PrivateSubnet1
  CanvasVPCPrivateSubnet1RouteTable2DE71EA5:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PrivateSubnet1
  CanvasVPCPrivateSubnet1RouteTableAssociation0CFE385A:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet1RouteTable2DE71EA5
      SubnetId: !Ref CanvasVPCPrivateSubnet1SubnetE5CDA06F
  CanvasVPCPrivateSubnet1DefaultRouteAAEB83F7:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet1RouteTable2DE71EA5
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CanvasVPCPublicSubnet1NATGatewayC5702CC8
  CanvasVPCPrivateSubnet2SubnetA9278FA5:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Private
        - Key: "aws-cdk:subnet-type"
          Value: Private
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PrivateSubnet2
  CanvasVPCPrivateSubnet2RouteTable6E1CF234:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      Tags:
        - Key: Name
          Value: >-
            PrivateIntegrationsStack/CanvasVPC/PrivateSubnet2
  CanvasVPCPrivateSubnet2RouteTableAssociation7F682A6E:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet2RouteTable6E1CF234
      SubnetId: !Ref CanvasVPCPrivateSubnet2SubnetA9278FA5
  CanvasVPCPrivateSubnet2DefaultRoute012406AE:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet2RouteTable6E1CF234
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CanvasVPCPublicSubnet2NATGatewayE6EAEEAB
  CanvasVPCIGW3645F9D4:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: PrivateIntegrationsStack/CanvasVPC
  CanvasVPCVPCGW514A8E2A:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref CanvasVPCD20D58E8
      InternetGatewayId: !Ref CanvasVPCIGW3645F9D4
  CanvasCluster09C95435:
    Type: "AWS::ECS::Cluster"
  CanvasServiceLB8E9ECEA5:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internal
      SecurityGroups:
        - !GetAtt
          - CanvasServiceLBSecurityGroup22BA351A
          - GroupId
      Subnets:
        - !Ref CanvasVPCPrivateSubnet1SubnetE5CDA06F
        - !Ref CanvasVPCPrivateSubnet2SubnetA9278FA5
      Type: application
  CanvasServiceLBSecurityGroup22BA351A:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Automatically created Security Group for ELB
        PrivateIntegrationsStackCanvasServiceLBCB8E0368
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref CanvasVPCD20D58E8
  CanvasServiceLBSecurityGrouptoPrivateIntegrationsStackCanvasServiceSecurityGroupD7C89143805EA68A3C:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt
        - CanvasServiceLBSecurityGroup22BA351A
        - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt
        - CanvasServiceSecurityGroup334FF7AF
        - GroupId
      FromPort: 80
      ToPort: 80
  CanvasServiceLBPublicListener2554FECD:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CanvasServiceLBPublicListenerECSGroup0E6605DB
          Type: forward
      LoadBalancerArn: !Ref CanvasServiceLB8E9ECEA5
      Port: 80
      Protocol: HTTP
  CanvasServiceLBPublicListenerECSGroup0E6605DB:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId: !Ref CanvasVPCD20D58E8
  CanvasServiceTaskDefTaskRole2B89439A:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
  CanvasServiceTaskDef914930A0:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: "public.ecr.aws/ecs-sample-image/amazon-ecs-sample:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CanvasServiceTaskDefwebLogGroupBA8BE497
              awslogs-stream-prefix: CanvasService
              awslogs-region: !Ref "AWS::Region"
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "512"
      ExecutionRoleArn: !GetAtt
        - CanvasServiceTaskDefExecutionRoleC7103AEA
        - Arn
      Family: >-
        PrivateIntegrationsStackCanvasServiceTaskDefB5E162FC
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt
        - CanvasServiceTaskDefTaskRole2B89439A
        - Arn
  CanvasServiceTaskDefwebLogGroupBA8BE497:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  CanvasServiceTaskDefExecutionRoleC7103AEA:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
  CanvasServiceTaskDefExecutionRoleDefaultPolicy0F96072D:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: !GetAtt
              - CanvasServiceTaskDefwebLogGroupBA8BE497
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CanvasServiceTaskDefExecutionRoleDefaultPolicy0F96072D
      Roles:
        - !Ref CanvasServiceTaskDefExecutionRoleC7103AEA
  CanvasService73010F72:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref CanvasCluster09C95435
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref CanvasServiceLBPublicListenerECSGroup0E6605DB
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt
              - CanvasServiceSecurityGroup334FF7AF
              - GroupId
          Subnets:
            - !Ref CanvasVPCPrivateSubnet1SubnetE5CDA06F
            - !Ref CanvasVPCPrivateSubnet2SubnetA9278FA5
      TaskDefinition: !Ref CanvasServiceTaskDef914930A0
    DependsOn:
      - CanvasServiceLBPublicListenerECSGroup0E6605DB
      - CanvasServiceLBPublicListener2554FECD
  CanvasServiceSecurityGroup334FF7AF:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        PrivateIntegrationsStack/CanvasService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref CanvasVPCD20D58E8
  CanvasServiceSecurityGroupfromPrivateIntegrationsStackCanvasServiceLBSecurityGroup37A9AEF980935D99E0:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId: !GetAtt
        - CanvasServiceSecurityGroup334FF7AF
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - CanvasServiceLBSecurityGroup22BA351A
        - GroupId
      ToPort: 80
  CanvasAPI74888AAD:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: canvas
      ProtocolType: HTTP
  CanvasAPIANYproxylistenerED87ABC9:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref CanvasAPI74888AAD
      IntegrationType: HTTP_PROXY
      ConnectionId: !Ref CanvasAPIVpcLink1E8511BD8
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref CanvasServiceLBPublicListener2554FECD
      PayloadFormatVersion: "1.0"
  CanvasAPIANYproxyE1641F8A:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref CanvasAPI74888AAD
      RouteKey: "ANY /{proxy+}"
      AuthorizationType: NONE
      Target: !Join
        - ""
        - - integrations/
          - !Ref CanvasAPIANYproxylistenerED87ABC9
  CanvasAPIVpcLink1E8511BD8:
    Type: "AWS::ApiGatewayV2::VpcLink"
    Properties:
      Name: PrivateIntegrationsStackCanvasAPIVpcLink1C5205521
      SubnetIds:
        - !Ref CanvasVPCPrivateSubnet1SubnetE5CDA06F
        - !Ref CanvasVPCPrivateSubnet2SubnetA9278FA5
      SecurityGroupIds: []
  myLogGroup46524CAB:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StageWithLogging:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref CanvasAPI74888AAD
      StageName: $default
      AccessLogSettings:
        DestinationArn: !GetAtt
          - myLogGroup46524CAB
          - Arn
        Format: >-
          $context.identity.sourceIp - - [$context.requestTime]
          "$context.httpMethod $context.routeKey $context.protocol"
          $context.status $context.responseLength $context.requestId
      AutoDeploy: true
Outputs:
  CanvasServiceLoadBalancerDNSCBE42D83:
    Value: !GetAtt
      - CanvasServiceLB8E9ECEA5
      - DNSName
  CanvasServiceServiceURLB6E59CA2:
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - CanvasServiceLB8E9ECEA5
          - DNSName
  APIinvokeURL:
    Description: Your API's invoke URL
    Value: !GetAtt
      - CanvasAPI74888AAD
      - ApiEndpoint
