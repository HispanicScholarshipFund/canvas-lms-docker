Parameters:
  CanvasAppECRRepositoryUri:
    Type: String
    Description: "URI of the ECR repository"
    Default: "580472969326.dkr.ecr.us-west-1.amazonaws.com/canvas-app"
  CanvasSecretManagerARN:
    Type: String
    Description: "Secrets ARN"
    Default: "arn:aws:secretsmanager:us-west-1:580472969326:secret:PROD_HSF_CANVAS-mpLMvv"

Resources:
  CanvasVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CanvasStack/CanvasVPC
  CanvasVPCPublicSubnet1Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Public
        - Key: "aws-cdk:subnet-type"
          Value: Public
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet1RouteTable
      SubnetId: !Ref CanvasVPCPublicSubnet1Subnet
  CanvasVPCPublicSubnet1DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CanvasVPCIGW
    DependsOn:
      - CanvasVPCVPCGW
  CanvasVPCPublicSubnet1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet1NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref CanvasVPCPublicSubnet1Subnet
      AllocationId: !GetAtt
        - CanvasVPCPublicSubnet1
        - AllocationId
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet1
  CanvasVPCPublicSubnet2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Public
        - Key: "aws-cdk:subnet-type"
          Value: Public
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet2
  CanvasVPCPublicSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet2
  CanvasVPCPublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet2RouteTable
      SubnetId: !Ref CanvasVPCPublicSubnet2Subnet
  CanvasVPCPublicSubnet2DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CanvasVPCIGW
    DependsOn:
      - CanvasVPCVPCGW
  CanvasVPCPublicSubnet2EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet2
  CanvasVPCPublicSubnet2NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref CanvasVPCPublicSubnet2Subnet
      AllocationId: !GetAtt
        - CanvasVPCPublicSubnet2EIP
        - AllocationId
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PublicSubnet2
  CanvasVPCPrivateSubnet1Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Private
        - Key: "aws-cdk:subnet-type"
          Value: Private
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PrivateSubnet1
  CanvasVPCPrivateSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PrivateSubnet1
  CanvasVPCPrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet1RouteTable
      SubnetId: !Ref CanvasVPCPrivateSubnet1Subnet
  CanvasVPCPrivateSubnet1DefaultRouteA:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CanvasVPCPublicSubnet1NATGateway
  CanvasVPCPrivateSubnet2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Private
        - Key: "aws-cdk:subnet-type"
          Value: Private
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PrivateSubnet2
  CanvasVPCPrivateSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasVPC/PrivateSubnet2
  CanvasVPCPrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet2RouteTable
      SubnetId: !Ref CanvasVPCPrivateSubnet2Subnet
  CanvasVPCPrivateSubnet2DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasVPCPrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CanvasVPCPublicSubnet2NATGateway
  CanvasVPCIGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: CanvasStack/CanvasVPC
  CanvasVPCVPCGW:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref CanvasVPC
      InternetGatewayId: !Ref CanvasVPCIGW
  CanvasCluster:
    Type: "AWS::ECS::Cluster"
  CanvasServiceLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internal
      SecurityGroups:
        - !GetAtt
          - CanvasServiceLBSecurityGroup
          - GroupId
      Subnets:
        - !Ref CanvasVPCPrivateSubnet1Subnet
        - !Ref CanvasVPCPrivateSubnet2Subnet
      Type: application
  CanvasServiceLBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Automatically created Security Group for ELB
        CanvasStackCanvasServiceLB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref CanvasVPC
  CanvasServiceLBSecurityGrouptoCanvasStackCanvasServiceSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt
        - CanvasServiceLBSecurityGroup
        - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt
        - CanvasServiceSecurityGroup
        - GroupId
      FromPort: 80
      ToPort: 80
  CanvasServiceLBPublicListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CanvasServiceLBPublicListenerECSGroup
          Type: forward
      LoadBalancerArn: !Ref CanvasServiceLB
      Port: 80
      Protocol: HTTP
  CanvasServiceLBPublicListenerECSGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 3000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId: !Ref CanvasVPC
  CanvasServiceTaskDefTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17

  CanvasServiceTaskDef:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${CanvasAppECRRepositoryUri}:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CanvasServiceTaskDefwebLogGroup
              awslogs-stream-prefix: CanvasService
              awslogs-region: !Ref "AWS::Region"
          Name: web
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Secrets:
            - Name: EMAIL_DOMAIN
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_DOMAIN::"
            - Name: EMAIL_HOST_USER
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_HOST_USER::"
            - Name: EMAIL_HOST_PASSWORD
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_HOST_PASSWORD::"
            - Name: EMAIL_PORT
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_PORT::"
            - Name: EMAIL_HOST
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_HOST::"
            - Name: EMAIL_SENDER_ADDRESS
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_SENDER_ADDRESS::"
            - Name: EMAIL_SENDER_NAME
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_SENDER_NAME::"
            - Name: CANVAS_LMS_DOMAIN
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_DOMAIN::"
            - Name: CANVAS_LMS_ADMIN_EMAIL
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_ADMIN_EMAIL::"
            - Name: CANVAS_LMS_ADMIN_PASSWORD
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_ADMIN_PASSWORD::"
            - Name: CANVAS_LMS_ACCOUNT_NAME
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_ACCOUNT_NAME::"
            - Name: CANVAS_LMS_STATS_COLLECTION
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_STATS_COLLECTION::"
            - Name: DB_USER
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_USER::"
            - Name: DB_PORT
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_PORT::"
            - Name: DB_DRIVER
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_DRIVER::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_PASSWORD::"
            - Name: DB_HOST
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_HOST::"
            - Name: ADDITIONAL_ALLOWED_HOSTS
              ValueFrom: !Sub "${CanvasSecretManagerARN}:ADDITIONAL_ALLOWED_HOSTS::"
            - Name: REDIS_HOST
              ValueFrom: !Sub "${CanvasSecretManagerARN}:REDIS_HOST::"
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_ACCESS_KEY_ID::"
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_SECRET_ACCESS_KEY::"
            - Name: AWS_REGION
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_REGION::"
            - Name: AWS_S3_BUCKET
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_S3_BUCKET::"
            - Name: TZ
              ValueFrom: !Sub "${CanvasSecretManagerARN}:TZ::"

      Cpu: "512"
      ExecutionRoleArn: !GetAtt
        - CanvasServiceTaskDefExecutionRole
        - Arn
      Family: >-
        CanvasStackCanvasServiceTaskDef
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt
        - CanvasServiceTaskDefTaskRole
        - Arn

  CanvasServiceDelayedJobsTaskDef:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${CanvasAppECRRepositoryUri}:latest"
          Command: ["bundle", "exec", "script/delayed_job", "run"]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CanvasServiceTaskDefwebLogGroup
              awslogs-stream-prefix: CanvasService
              awslogs-region: !Ref "AWS::Region"
          Name: delayedJobs
          # PortMappings:
          #   - ContainerPort: 80
          #     Protocol: tcp
          Secrets:
            - Name: EMAIL_DOMAIN
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_DOMAIN::"
            - Name: EMAIL_HOST_USER
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_HOST_USER::"
            - Name: EMAIL_HOST_PASSWORD
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_HOST_PASSWORD::"
            - Name: EMAIL_PORT
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_PORT::"
            - Name: EMAIL_HOST
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_HOST::"
            - Name: EMAIL_SENDER_ADDRESS
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_SENDER_ADDRESS::"
            - Name: EMAIL_SENDER_NAME
              ValueFrom: !Sub "${CanvasSecretManagerARN}:EMAIL_SENDER_NAME::"
            - Name: CANVAS_LMS_DOMAIN
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_DOMAIN::"
            - Name: CANVAS_LMS_ADMIN_EMAIL
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_ADMIN_EMAIL::"
            - Name: CANVAS_LMS_ADMIN_PASSWORD
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_ADMIN_PASSWORD::"
            - Name: CANVAS_LMS_ACCOUNT_NAME
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_ACCOUNT_NAME::"
            - Name: CANVAS_LMS_STATS_COLLECTION
              ValueFrom: !Sub "${CanvasSecretManagerARN}:CANVAS_LMS_STATS_COLLECTION::"
            - Name: DB_USER
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_USER::"
            - Name: DB_PORT
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_PORT::"
            - Name: DB_DRIVER
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_DRIVER::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_PASSWORD::"
            - Name: DB_HOST
              ValueFrom: !Sub "${CanvasSecretManagerARN}:DB_HOST::"
            - Name: ADDITIONAL_ALLOWED_HOSTS
              ValueFrom: !Sub "${CanvasSecretManagerARN}:ADDITIONAL_ALLOWED_HOSTS::"
            - Name: REDIS_HOST
              ValueFrom: !Sub "${CanvasSecretManagerARN}:REDIS_HOST::"
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_ACCESS_KEY_ID::"
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_SECRET_ACCESS_KEY::"
            - Name: AWS_REGION
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_REGION::"
            - Name: AWS_S3_BUCKET
              ValueFrom: !Sub "${CanvasSecretManagerARN}:AWS_S3_BUCKET::"
            - Name: TZ
              ValueFrom: !Sub "${CanvasSecretManagerARN}:TZ::"
      Cpu: "512"
      ExecutionRoleArn: !GetAtt
        - CanvasServiceTaskDefExecutionRole
        - Arn
      Family: >-
        CanvasStackCanvasServiceDelayedJobsTaskDef
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt
        - CanvasServiceTaskDefTaskRole
        - Arn

  CanvasServiceTaskDefwebLogGroup:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  CanvasServiceTaskDefExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  CanvasServiceTaskDefExecutionRoleDefaultPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "secretsmanager:GetSecretValue"
              - "secretsmanager:DescribeSecret"
              - "secretsmanager:BatchGetSecretValue"
              - "secretsmanager:ListSecrets"
            Resource: "*"
            Effect: Allow
          - Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: !GetAtt
              - CanvasServiceTaskDefwebLogGroup
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CanvasServiceTaskDefExecutionRoleDefaultPolicy
      Roles:
        - !Ref CanvasServiceTaskDefExecutionRole

  CanvasService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref CanvasCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 3000
          TargetGroupArn: !Ref CanvasServiceLBPublicListenerECSGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt
              - CanvasServiceSecurityGroup
              - GroupId
          Subnets:
            - !Ref CanvasVPCPrivateSubnet1Subnet
            - !Ref CanvasVPCPrivateSubnet2Subnet
      TaskDefinition: !Ref CanvasServiceTaskDef
    DependsOn:
      - CanvasServiceLBPublicListenerECSGroup
      - CanvasServiceLBPublicListener

  CanvasServiceDelayedJobs:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref CanvasCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt
              - CanvasServiceSecurityGroup
              - GroupId
          Subnets:
            - !Ref CanvasVPCPrivateSubnet1Subnet
            - !Ref CanvasVPCPrivateSubnet2Subnet
      TaskDefinition: !Ref CanvasServiceDelayedJobsTaskDef
    DependsOn:
      - CanvasServiceLBPublicListenerECSGroup
      - CanvasServiceLBPublicListener

  CanvasServiceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        CanvasStack/CanvasService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref CanvasVPC

  CanvasServiceSecurityGroupfromCanvasStackCanvasServiceLBSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 3000
      GroupId: !GetAtt
        - CanvasServiceSecurityGroup
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - CanvasServiceLBSecurityGroup
        - GroupId
      ToPort: 3000
  CanvasAPI:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: canvas-api
      ProtocolType: HTTP
  CanvasAPIANYproxylistener:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref CanvasAPI
      IntegrationType: HTTP_PROXY
      ConnectionId: !Ref CanvasAPIVpcLink
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref CanvasServiceLBPublicListener
      PayloadFormatVersion: "1.0"
  CanvasAPIANYproxy:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref CanvasAPI
      RouteKey: "ANY /{proxy+}"
      AuthorizationType: NONE
      Target: !Join
        - ""
        - - integrations/
          - !Ref CanvasAPIANYproxylistener
  CanvasAPIVpcLink:
    Type: "AWS::ApiGatewayV2::VpcLink"
    Properties:
      Name: CanvasStackCanvasAPIVpcLink
      SubnetIds:
        - !Ref CanvasVPCPrivateSubnet1Subnet
        - !Ref CanvasVPCPrivateSubnet2Subnet
      SecurityGroupIds: []
  CanvasLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StageWithLogging:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref CanvasAPI
      StageName: $default
      AccessLogSettings:
        DestinationArn: !GetAtt
          - CanvasLogGroup
          - Arn
        Format: >-
          $context.identity.sourceIp - - [$context.requestTime]
          "$context.httpMethod $context.routeKey $context.protocol"
          $context.status $context.responseLength $context.requestId
      AutoDeploy: true
Outputs:
  CanvasServiceLoadBalancerDNS:
    Value: !GetAtt
      - CanvasServiceLB
      - DNSName
  CanvasServiceServiceURL:
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - CanvasServiceLB
          - DNSName
  APIinvokeURL:
    Description: Your API's invoke URL
    Value: !GetAtt
      - CanvasAPI
      - ApiEndpoint
