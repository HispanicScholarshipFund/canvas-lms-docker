Resources:
  CanvasTutorialVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CanvasStack/CanvasTutorialVPC
  CanvasTutorialVPCPublicSubnet1Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Public
        - Key: "aws-cdk:subnet-type"
          Value: Public
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet1
  CanvasTutorialVPCPublicSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet1
  CanvasTutorialVPCPublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPublicSubnet1RouteTable
      SubnetId: !Ref CanvasTutorialVPCPublicSubnet1Subnet
  CanvasTutorialVPCPublicSubnet1DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CanvasTutorialVPC
    DependsOn:
      - CanvasTutorialVPCVPCGW
  CanvasTutorialVPCPublicSubnet1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet1
  CanvasTutorialVPCPublicSubnet1NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref CanvasTutorialVPCPublicSubnet1Subnet
      AllocationId: !GetAtt
        - CanvasTutorialVPCPublicSubnet1
        - AllocationId
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet1
  CanvasTutorialVPCPublicSubnet2Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Public
        - Key: "aws-cdk:subnet-type"
          Value: Public
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet2
  CanvasTutorialVPCPublicSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet2
  CanvasTutorialVPCPublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPublicSubnet2RouteTable
      SubnetId: !Ref CanvasTutorialVPCPublicSubnet2Subnet2
  CanvasTutorialVPCPublicSubnet2DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CanvasTutorialVPC
    DependsOn:
      - CanvasTutorialVPCVPCGW
  CanvasTutorialVPCPublicSubnet2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet2
  CanvasTutorialVPCPublicSubnet2NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref CanvasTutorialVPCPublicSubnet2Subnet2
      AllocationId: !GetAtt
        - CanvasTutorialVPCPublicSubnet2
        - AllocationId
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PublicSubnet2
  CanvasTutorialVPCPrivateSubnet1Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Private
        - Key: "aws-cdk:subnet-type"
          Value: Private
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PrivateSubnet1
  CanvasTutorialVPCPrivateSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PrivateSubnet1
  CanvasTutorialVPCPrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPrivateSubnet1RouteTable
      SubnetId: !Ref CanvasTutorialVPCPrivateSubnet1Subnet
  CanvasTutorialVPCPrivateSubnet1DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CanvasTutorialVPCPublicSubnet1NATGateway
  CanvasTutorialVPCPrivateSubnet2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "aws-cdk:subnet-name"
          Value: Private
        - Key: "aws-cdk:subnet-type"
          Value: Private
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PrivateSubnet2
  CanvasTutorialVPCPrivateSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      Tags:
        - Key: Name
          Value: >-
            CanvasStack/CanvasTutorialVPC/PrivateSubnet2
  CanvasTutorialVPCPrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPrivateSubnet2RouteTable
      SubnetId: !Ref CanvasTutorialVPCPrivateSubnet2Subnet
  CanvasTutorialVPCPrivateSubnet2DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref CanvasTutorialVPCPrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CanvasTutorialVPCPublicSubnet2NATGateway
  CanvasTutorialVPC:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: CanvasStack/CanvasTutorialVPC
  CanvasTutorialVPCVPCGW:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref CanvasTutorialVPC
      InternetGatewayId: !Ref CanvasTutorialVPC
  CanvasTutorialCluster:
    Type: "AWS::ECS::Cluster"
  CanvasTutorialService:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internal
      SecurityGroups:
        - !GetAtt
          - CanvasTutorialServiceLBSecurityGroup
          - GroupId
      Subnets:
        - !Ref CanvasTutorialVPCPrivateSubnet1Subnet
        - !Ref CanvasTutorialVPCPrivateSubnet2Subnet
      Type: application
  CanvasTutorialServiceLBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Automatically created Security Group for ELB
        CanvasStackCanvasTutorialServiceLBCB8E0368
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref CanvasTutorialVPC
  CanvasTutorialServiceLBSecurityGrouptoCanvasStackCanvasTutorialServiceSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt
        - CanvasTutorialServiceLBSecurityGroup
        - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt
        - CanvasTutorialServiceSecurityGroup
        - GroupId
      FromPort: 80
      ToPort: 80
  CanvasTutorialServiceLBPublicListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CanvasTutorialServiceLBPublicListenerECSGroup
          Type: forward
      LoadBalancerArn: !Ref CanvasTutorialService
      Port: 80
      Protocol: HTTP
  CanvasTutorialServiceLBPublicListenerECSGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId: !Ref CanvasTutorialVPC
  CanvasTutorialServiceTaskDefTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
  CanvasTutorialServiceTaskDef:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: "public.ecr.aws/ecs-sample-image/amazon-ecs-sample:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CanvasTutorialServiceTaskDefwebLogGroup
              awslogs-stream-prefix: CanvasTutorialService
              awslogs-region: !Ref "AWS::Region"
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "512"
      ExecutionRoleArn: !GetAtt
        - CanvasTutorialServiceTaskDefExecutionRole
        - Arn
      Family: >-
        CanvasStackCanvasTutorialServiceTaskDefB5E162FC
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt
        - CanvasTutorialServiceTaskDefTaskRole
        - Arn
  CanvasTutorialServiceTaskDefwebLogGroup:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  CanvasTutorialServiceTaskDefExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
  CanvasTutorialServiceTaskDefExecutionRoleDefaultPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: !GetAtt
              - CanvasTutorialServiceTaskDefwebLogGroup
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CanvasTutorialServiceTaskDefExecutionRoleDefaultPolicy
      Roles:
        - !Ref CanvasTutorialServiceTaskDefExecutionRole
  CanvasTutorialService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref CanvasTutorialCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref CanvasTutorialServiceLBPublicListenerECSGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt
              - CanvasTutorialServiceSecurityGroup
              - GroupId
          Subnets:
            - !Ref CanvasTutorialVPCPrivateSubnet1Subnet
            - !Ref CanvasTutorialVPCPrivateSubnet2Subnet
      TaskDefinition: !Ref CanvasTutorialServiceTaskDef
    DependsOn:
      - CanvasTutorialServiceLBPublicListenerECSGroup
      - CanvasTutorialServiceLBPublicListener
  CanvasTutorialServiceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        CanvasStack/CanvasTutorialService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref CanvasTutorialVPC
  CanvasTutorialServiceSecurityGroupfromCanvasStackCanvasTutorialServiceLBSecurityGroup:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId: !GetAtt
        - CanvasTutorialServiceSecurityGroup
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - CanvasTutorialServiceLBSecurityGroup
        - GroupId
      ToPort: 80
  CanvasTutorialAPI:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: private-integrations-tutorial
      ProtocolType: HTTP
  CanvasTutorialAPIANYproxylistener:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref CanvasTutorialAPI
      IntegrationType: HTTP_PROXY
      ConnectionId: !Ref CanvasTutorialAPIVpcLink
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref CanvasTutorialServiceLBPublicListener
      PayloadFormatVersion: "1.0"
  CanvasTutorialAPIANYproxy:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref CanvasTutorialAPI
      RouteKey: "ANY /{proxy+}"
      AuthorizationType: NONE
      Target: !Join
        - ""
        - - integrations/
          - !Ref CanvasTutorialAPIANYproxylistener
  CanvasTutorialAPIVpcLink:
    Type: "AWS::ApiGatewayV2::VpcLink"
    Properties:
      Name: CanvasStackCanvasTutorialAPIVpcLink
      SubnetIds:
        - !Ref CanvasTutorialVPCPrivateSubnet1Subnet
        - !Ref CanvasTutorialVPCPrivateSubnet2Subnet
      SecurityGroupIds: []
  myLogGroup46524CAB:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StageWithLogging:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref CanvasTutorialAPI
      StageName: $default
      AccessLogSettings:
        DestinationArn: !GetAtt
          - myLogGroup46524CAB
          - Arn
        Format: >-
          $context.identity.sourceIp - - [$context.requestTime]
          "$context.httpMethod $context.routeKey $context.protocol"
          $context.status $context.responseLength $context.requestId
      AutoDeploy: true
Outputs:
  CanvasTutorialServiceLoadBalancerDNS:
    Value: !GetAtt
      - CanvasTutorialService
      - DNSName
  CanvasTutorialServiceServiceURL:
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - CanvasTutorialService
          - DNSName
  APIinvokeURL:
    Description: Your API's invoke URL
    Value: !GetAtt
      - CanvasTutorialAPI
      - ApiEndpoint
